npm install axios
Per chiamare un'API e ottenere i dati necessari per la riproduzione del flusso live streaming e per la funzionalità di ricerca, dovresti considerare di utilizzare la libreria Axios o l'API Fetch nativa di JavaScript. 

AuthContext e un AuthProvider in React, che sono usati per gestire lo stato dell'autenticazione attraverso l'intera applicazione. 
Questi componenti permettono di mantenere e accedere allo stato di autenticazione (ad esempio, un token JWT) in maniera centralizzata e accessibile da qualsiasi componente all'interno dell'albero dei componenti di React che necessita di tale informazione.

- Auth0

Per integrare Auth0 per l'autenticazione degli utenti nella tua applicazione React, dovrai seguire diversi passaggi per configurare l'SDK React di Auth0. Innanzitutto, dovrai installare l'SDK React di Auth0 nella directory del tuo progetto utilizzando il comando npm install @auth0/auth0-react.

Dopo aver installato l'SDK, dovrai configurare il componente Auth0Provider per avvolgere il componente radice della tua applicazione. Ciò richiede di specificare il domain e clientId che puoi ottenere dalle impostazioni della tua applicazione Auth0 sul sito web di Auth0.

Dovresti anche impostare le variabili d'ambiente nel tuo file .env per REACT_APP_AUTH0_DOMAIN e REACT_APP_AUTH0_CLIENT_ID con i valori corrispondenti dalle impostazioni della tua applicazione Auth0.

Per scopi di routing e per gestire lo stato dell'autenticazione, puoi creare un componente di ordine superiore denominato Auth0ProviderWithHistory. Questo componente userà l'hook useHistory di React Router per gestire la cronologia delle sessioni e per navigare l'utente dopo gli eventi di autenticazione.

Per facilitare la funzionalità di login e logout, utilizzerai l'hook useAuth0() fornito dall'SDK, che offre metodi come loginWithRedirect() e logout(). Ad esempio, un componente pulsante di login utilizzerà loginWithRedirect() per inviare l'utente alla pagina di login universale di Auth0.

Infine, per visualizzare le informazioni del profilo utente dopo che hanno effettuato l'accesso, puoi utilizzare la proprietà user esposta da useAuth0() per accedere ai dettagli dell'utente loggato, come il loro nome e immagine del profilo.


npm install -g ngrok



// file App.tsx con video player di you tube

import React, { useState, useRef, useContext } from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { RootState } from './app/store';
import VideoPlayer from './components/VideoPlayer';
import SearchComponent from './components/SearchComponent';
import LoginForm from './components/LoginForm';
import RegistrationForm from './components/RegistrationForm';
import { AuthContext } from './context/AuthContext';
import './App.css';

function App() {
  const [selectedRadioUrl, setSelectedRadioUrl] = useState('');
  const videoPlayerRef = useRef<HTMLVideoElement>(null);
  const videoURL = useSelector((state: RootState) => state.video.url);
  const { isLoggedIn } = useContext(AuthContext);

  const handleStreamSelect = (url: string) => {
    setSelectedRadioUrl(url);
  };
  const handleRadioSelect = (url: string) => {
    setSelectedRadioUrl(url);
  };
  

  return (
    <BrowserRouter>
      <div className="App">
        <h1>Benvenuto nell'App live-streaming audio e video</h1>
        <Routes>
          <Route path="/" element={!isLoggedIn() ? <RegistrationForm /> : (
            <>
              <VideoPlayer url={videoURL} /> {/* Video di YouTube */}
              {selectedRadioUrl && <VideoPlayer url={selectedRadioUrl} />} {/* Player per la radio selezionata */}
            </>
          )} />
          <Route path="/login" element={<LoginForm />} />
          <Route path="/video" element={
            <div className="video-page-container">
              <VideoPlayer url={videoURL} /> {/* Video di YouTube */}
              <div className="search-box">
                <h2 className="search-box-title">Cerca Radio</h2>
                <SearchComponent onStreamSelect={handleRadioSelect} />
              </div>
              {selectedRadioUrl && (
                <div className="radio-player-container">
                  <VideoPlayer url={selectedRadioUrl} /> {/* Player per la radio selezionata */}
                </div>
              )}
            </div>
          } />
        </Routes>
      </div>
    </BrowserRouter>
  );
}
export default App;